import numpy as np  # 导入NumPy库，用于数值计算

"""
    因为本优化解决了6个工程优化的问题，所以对于不同的工程问题有不同的参数，
    这里会根据具体的工程问题选择不同的参数
"""

def get_h(g):
    """
    判断约束条件是否被违反

    参数:
    g: float - 约束条件的值

    返回:
    int - 如果约束条件被违反，返回1；否则返回0
    """
    if g < 0:  # 如果约束条件小于0，表示没有违反
        return 0  # 返回0
    else:  # 如果约束条件大于等于0，表示违反
        return 1  # 返回1

def get_functions_details(function_name):
    """
    根据工程问题的名称获取相应的参数

    参数:
    function_name: str - 工程问题的名称

    返回:
    tuple - 包含下界、上界、维度和目标函数的元组
    """
    # 拉/压弹簧设计
    if function_name == "F1":
        fobj = lambda x: F1(x)  # 定义目标函数为F1
        lb = [0.05, 0.25, 2]  # 定义下界
        ub = [2, 1.3, 15]  # 定义上界
        dim = 3  # 定义维度
        return lb, ub, dim, fobj  # 返回参数
    # 压力容器设计
    if function_name == "F2":
        fobj = lambda x: F2(x)  # 定义目标函数为F2
        lb = [0, 0, 10, 10]  # 定义下界
        ub = [99, 99, 200, 200]  # 定义上界
        dim = 4  # 定义维度
        return lb, ub, dim, fobj  # 返回参数
    # 焊接梁设计
    if function_name == "F3":
        fobj = lambda x: F3(x)  # 定义目标函数为F3
        lb = [0.1, 0.1, 0.1, 0.1]  # 定义下界
        ub = [2, 10, 10, 2]  # 定义上界
        dim = 4  # 定义维度
        return lb, ub, dim, fobj  # 返回参数
    # 减速器设计
    if function_name == "F4":
        fobj = lambda x: F4(x)  # 定义目标函数为F4
        lb = [2.6, 0.7, 17, 7.3, 7.3, 2.9, 5.0]  # 定义下界
        ub = [3.6, 0.8, 28, 8.3, 8.3, 3.9, 5.5]  # 定义上界
        dim = 7  # 定义维度
        return lb, ub, dim, fobj  # 返回参数
    # 齿轮系设计问题
    if function_name == "F5":
        fobj = lambda x: F5(x)  # 定义目标函数为F5
        lb = [12, 12, 12, 12]  # 定义下界
        ub = [60, 60, 60, 60]  # 定义上界
        dim = 4  # 定义维度
        return lb, ub, dim, fobj  # 返回参数
    # 三杆桁架设计问题
    if function_name == "F6":
        fobj = lambda x: F6(x)  # 定义目标函数为F6
        lb = [0, 0]  # 定义下界
        ub = [1, 1]  # 定义上界
        dim = 2  # 定义维度
        return lb, ub, dim, fobj  # 返回参数

def F1(x):
    """
    拉/压弹簧设计的目标函数

    参数:
    x: array-like - 设计变量

    返回:
    float - 目标函数值
    """
    g = [0 for i in range(4)]  # 初始化约束条件数组
    cost = (x[2] + 2) * x[1] * x[0] ** 2  # 计算成本
    g[0] = 1 - ((x[2] * (x[1]**3)) / (71785 * (x[0]**4)))  # 计算第一个约束条件
    gtmp = (4 * x[1]**2 - x[0] * x[1]) / (12566 * (x[1] * x[0]**3 - x[0]**4))  # 计算中间变量
    g[1] = gtmp + 1 / (5108 * x[0]**2) - 1  # 计算第二个约束条件
    g[2] = 1 - ((140.45 * x[0]) / ((x[1]**2) * x[2]))  # 计算第三个约束条件
    g[3] = ((x[0] + x[1]) / 1.5) - 1  # 计算第四个约束条件
    lam = 10**15  # 惩罚系数
    z = 0  # 初始化惩罚值
    for k in range(len(g)):  # 遍历每个约束条件
        z = z + lam * (g[k]**2) * get_h(g[k])  # 计算惩罚值
    o = cost + z  # 计算目标函数值
    return o  # 返回目标函数值

def F2(x):
    """
    压力容器设计的目标函数

    参数:
    x: array-like - 设计变量

    返回:
    float - 目标函数值
    """
    g = [0 for i in range(4)]  # 初始化约束条件数组
    cost = 0.6224 * x[0] * x[2] * x[3] + 1.7781 * x[1] * x[2]**2 + 3.1661 * x[0]**2 * x[3] + 19.84 * x[0]**2 * x[2]  # 计算成本
    g[0] = -x[0] + 0.0193 * x[2]  # 计算第一个约束条件
    g[1] = -x[1] + 0.00954 * x[2]  # 计算第二个约束条件
    g[2] = -np.pi * x[2]**2 * x[3] - (4 / 3) * np.pi * x[2]**3 + 1296000  # 计算第三个约束条件
    g[3] = x[3] - 240  # 计算第四个约束条件
    lam = 10**15  # 惩罚系数
    z = 0  # 初始化惩罚值
    for k in range(len(g)):  # 遍历每个约束条件
        z = z + lam * (g[k]**2) * get_h(g[k])  # 计算惩罚值
    o = cost + z  # 计算目标函数值
    return o  # 返回目标函数值

def F3(x):
    """
    焊接梁设计的目标函数

    参数:
    x: array-like - 设计变量

    返回:
    float - 目标函数值
    """
    g = [0 for i in range(7)]  # 初始化约束条件数组
    cost = 1.10471 * (x[0] ** 2) * x[1] + 0.04811 * x[2] * x[3] * (14.0 + x[1])  # 计算成本
    # 不等式约束
    Q = 6000 * (14 + x[1] / 2)  # 计算Q值
    D = np.sqrt(x[1]**2 / 4 + (x[0] + x[2])**2 / 4)  # 计算D值
    J = 2 * (x[0] * x[1] * np.sqrt(2) * (x[1]**2 / 12 + (x[0] + x[2])**2 / 4))  # 计算J值
    alpha = 6000 / (np.sqrt(2) * x[0] * x[1])  # 计算alpha值
    beta = Q * D / J  # 计算beta值
    tau = np.sqrt(alpha ** 2 + 2 * alpha * beta * x[1] / (2 * D) + beta ** 2)  # 计算tau值
    sigma = 504000 / (x[3] * x[2]**2)  # 计算sigma值
    delta = 65856000 / (30 * 10 ** 6 * x[3] * x[2]**3)  # 计算delta值
    F = 4.013 * (30 * 10**6) / 196 * np.sqrt(x[2] ** 2 * x[3]**6 / 36) * (1 - x[2] * np.sqrt(30 / 48) / 28)  # 计算F值

    g[0] = tau - 13600  # 计算第一个约束条件
    g[1] = sigma - 30000  # 计算第二个约束条件
    g[2] = x[0] - x[3]  # 计算第三个约束条件
    g[3] = 0.10471 * x[0]**2 + 0.04811 * x[2] * x[3] * (14 + x[1]) - 5.0  # 计算第四个约束条件
    g[4] = 0.125 - x[0]  # 计算第五个约束条件
    g[5] = delta - 0.25  # 计算第六个约束条件
    g[6] = 6000 - F  # 计算第七个约束条件
    lam = 10**15  # 惩罚系数
    z = 0  # 初始化惩罚值
    for k in range(len(g)):  # 遍历每个约束条件
        z = z + lam * (g[k] ** 2) * get_h(g[k])  # 计算惩罚值
    o = cost + z  # 计算目标函数值
    return o  # 返回目标函数值

def F4(x):
    """
    减速器设计的目标函数

    参数:
    x: array-like - 设计变量

    返回:
    float - 目标函数值
    """
    g = [0 for i in range(11)]  # 初始化约束条件数组
    cost = 0.7854 * x[0] * (x[1] ** 2) * (3.3333 * (x[2] ** 2) + 14.9334 * x[2] - 43.0934) - 1.508 * x[0] * (
            (x[5] ** 2) + (x[6] ** 2)) + 7.4777 * ((x[5] ** 3) + (x[6] ** 3)) + 0.7854 * (
                   x[3] * (x[5] ** 2) + x[4] * (x[6] ** 2))  # 计算成本
    g[0] = (27 / (x[0] * (x[1] ** 2) * x[2])) - 1  # 计算第一个约束条件
    g[1] = (397.5 / (x[0] * (x[1] ** 2) * (x[2] ** 2))) - 1  # 计算第二个约束条件
    g[2] = (1.93 * (x[3] ** 3) / (x[1] * (x[5] ** 4) * x[2])) - 1  # 计算第三个约束条件
    g[3] = (1.93 * (x[4] ** 3) / (x[1] * (x[6] ** 4) * x[2])) - 1  # 计算第四个约束条件
    g[4] = (((((745 * x[3] / (x[1] * x[2])) ** 2) + 16.9 * (10 ** 6)) ** (1 / 2)) / (110 * (x[5] ** 3))) - 1  # 计算第五个约束条件
    g[5] = (((((745 * x[4] / (x[1] * x[2])) ** 2) + 157.5 * (10 ** 6)) ** (1 / 2)) / (85 * (x[6] ** 3))) - 1  # 计算第六个约束条件
    g[6] = (x[1] * x[2] / 40) - 1  # 计算第七个约束条件
    g[7] = ((5 * x[1]) / x[0]) - 1  # 计算第八个约束条件
    g[8] = (x[0] / (12 * x[1])) - 1  # 计算第九个约束条件
    g[9] = ((1.5 * x[5] + 1.9) / x[3]) - 1  # 计算第十个约束条件
    g[10] = ((1.1 * x[6] + 1.9) / x[4]) - 1  # 计算第十一个约束条件
    lam = 10 ** 15  # 惩罚系数
    z = 0  # 初始化惩罚值
    for k in range(len(g)):  # 遍历每个约束条件
        z = z + lam * (g[k] ** 2) * get_h(g[k])  # 计算惩罚值
    o = cost + z  # 计算目标函数值
    return o  # 返回目标函数值

def F5(x):
    """
    齿轮系设计问题的目标函数

    参数:
    x: array-like - 设计变量

    返回:
    float - 目标函数值
    """
    cost = ((1 / 6.931) - ((x[2] * x[1]) / (x[0] * x[3]))) ** 2  # 计算成本
    o = cost  # 目标函数值即为成本
    return o  # 返回目标函数值

def F6(x):
    """
    三杆桁架设计问题的目标函数

    参数:
    x: array-like - 设计变量

    返回:
    float - 目标函数值
    """
    g = [0 for i in range(3)]  # 初始化约束条件数组
    cost = (np.multiply(np.multiply(2, np.sqrt(2)), x[0]) + x[1]) * 100  # 计算成本
    g[0] = np.divide(np.multiply(np.sqrt(2), x[0]) + x[1],
                     np.multiply(np.sqrt(2), np.power(x[0], 2)) + np.multiply(np.multiply(2, x[0]), x[1])) * 2 - 2  # 计算第一个约束条件
    g[1] = np.divide(x[1], np.multiply(np.sqrt(2), np.power(x[0], 2)) + np.multiply(np.multiply(2, x[0]), x[1])) * 2 - 2  # 计算第二个约束条件
    g[2] = np.divide(1, np.multiply(np.sqrt(2), x[1]) + x[0]) * 2 - 2  # 计算第三个约束条件
    lam = 10 ** 15  # 惩罚系数
    z = 0  # 初始化惩罚值
    for k in range(len(g)):  # 遍历每个约束条件
        z = z + lam * (g[k] ** 2) * get_h(g[k])  # 计算惩罚值
    o = cost + z  # 计算目标函数值
    return o  # 返回目标函数值